import streamlit as st
import pandas as pd

# Configurando o layout para modo "wide"
st.set_page_config(layout="wide")

# T√≠tulo do app
st.title('‚öóÔ∏èEthanol AI (Software em desenvolvimento)')

# Informa√ß√£o principal
st.write("O Ethanol AI √© uma ferramenta √∫til para estudar o comportamento de diferentes processos de produ√ß√£o de etanol de segunda gera√ß√£o, quando submetidos a diferentes condi√ß√µes operacionais. Aqui, voc√™ pode testar diferentes combina√ß√µes de par√¢metros de rea√ß√£o, encontrando essencialmente o rendimento m√°ximo poss√≠vel para cada situa√ß√£o.")
st.markdown("<hr style='border: 1px solid #ccc;' />", unsafe_allow_html=True)

# Etapa de Pr√©-Tratamento
st.markdown(
    "<h1 style='font-size:50px;'>Pr√©-Tratamento</h1>",
    unsafe_allow_html=True
)
st.write("Nesta se√ß√£o, introduza os dados relevantes ao c√°lculo do redimento do Pr√©-Tratamento.")

# Criando colunas "Par√¢metros" e "Resultados"
col1, spacer, col2, spacer2, col3 = st.columns([10, 2, 10, 2, 10])

# Personalizando a coluna Bimomassa(col1)
with col1:
    # Escolha das caracter√≠sticas do modelo
    st.header("Dados Iniciais")
    st.write("Informe os dados principais de sua simula√ß√£o.")
    biomassa = st.selectbox("Selecione um tipo de biomassa", ['Baga√ßo de Cana-de-A√ß√∫car', 'Palha da Cana-de-A√ß√∫car'])
    pretratamento = st.selectbox("Selecione um tipo de Pr√©-Tratamento", ['√Åcido/B√°sico', 'Explos√£o a Vapor', 'Organossolve'])
    celulose = st.number_input("Porcentagem de Celulose (0,00 - 100,00) (%)", min_value=0.0, max_value=100.0, format="%.2f")
    lignina = st.number_input("Porcentagem de Lignina (0,00 - 100,00) (%)", min_value=0.0, max_value=100.0, format="%.2f")
    hemicelulose = st.number_input("Porcentagem de Hemicelulose (0,00 - 100,00) (%)", min_value=0.0, max_value=100.0, format="%.2f")
    cinzas = st.number_input("Porcentagem de cinzas (0,00 - 100,00) (%)", min_value=0.0, max_value=100.0, format="%.2f")

# Personalizando a coluna Par√¢metros do Pr√©-Tratamento (col2)
with col2:
    
    st.header("Par√¢metros do Pr√©-Tratamento")
    st.write(f"Informe os par√¢metros do pr√© tratamento para {biomassa}.")
    
    # Se a biomassa escolhida foi Baga√ßo de Cana-de-A√ß√∫car
    if biomassa == "Baga√ßo de Cana-de-A√ß√∫car":
        bagaco1 = st.number_input("Par√¢metro 1 - Baga√ßo")
        bagaco2 = st.number_input("Par√¢metro 2 - Baga√ßo")
        bagaco3 = st.number_input("Par√¢metro 3 - Baga√ßo")
        bagaco4 = st.selectbox("Par√¢metro 4 - Baga√ßo", options=["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"])
        bagaco5 = st.selectbox("Par√¢metro 5 - Baga√ßo", options=["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C"])
        bagaco6 = st.checkbox("Presen√ßa do reagente x")

    # Se a biomassa escolhida foi Palha da Cana-de-A√ß√∫car
    if biomassa == "Palha da Cana-de-A√ß√∫car":
        palha1 = st.number_input("Par√¢metro 1 - Palha Cana")
        palha2 = st.number_input("Par√¢metro 2 - Palha Cana")
        palha3 = st.number_input("Par√¢metro 3 - Palha Cana")
        palha4 = st.selectbox("Par√¢metro 4 - Palha Cana", options=["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"])
        palha5 = st.selectbox("Par√¢metro 5 - Palha Cana", options=["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C"])
        palha6 = st.selectbox("Par√¢metro 6 - Palha Cana", options=["Sim", "N√£o"])


# Selecionando o modelo de pr√©-tratamento

import pickle

if biomassa == "Baga√ßo de Cana-de-A√ß√∫car" and pretratamento == "√Åcido/B√°sico":

    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[bagaco1, bagaco2, bagaco3, int(bagaco4[-1]), int(bagaco5[-1]), int(bagaco6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")

if biomassa == "Palha da Cana-de-A√ß√∫car" and pretratamento == "√Åcido/B√°sico":
    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[palha1, palha2, palha3, int(palha4[-1]), int(palha5[-1]), int(palha6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")

if biomassa == "Baga√ßo de Cana-de-A√ß√∫car" and pretratamento == "Explos√£o a Vapor":
    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[bagaco1, bagaco2, bagaco3, int(bagaco4[-1]), int(bagaco5[-1]), int(bagaco6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")

if biomassa == "Palha da Cana-de-A√ß√∫car" and pretratamento == "Explos√£o a Vapor":
    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[palha1, palha2, palha3, int(palha4[-1]), int(palha5[-1]), int(palha6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")

if biomassa == "Baga√ßo de Cana-de-A√ß√∫car" and pretratamento == "Organossolve":
    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[bagaco1, bagaco2, bagaco3, int(bagaco4[-1]), int(bagaco5[-1]), int(bagaco6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")

if biomassa == "Palha da Cana-de-A√ß√∫car" and pretratamento == "Organossolve":
    # Carregar o modelo de machine learning empacotado com pickle
    try:
        with open('modelo_pretratamento.pkl', 'rb') as file:
            modelo = pickle.load(file)
        
        # Preparar os dados de entrada para o modelo
        dados_entrada = [[palha1, palha2, palha3, int(palha4[-1]), int(palha5[-1]), int(palha6)]]
        
        # Fazer a previs√£o com o modelo carregado
        rendimento_previsto = modelo.predict(dados_entrada)[0]
        
        # Exibir o resultado previsto
        st.success(f"Rendimento previsto pelo modelo: {rendimento_previsto:.2f}%")
    except FileNotFoundError:
        st.error("O arquivo do modelo 'modelo_pretratamento.pkl' n√£o foi encontrado.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar o modelo: {e}")


# Personalizando a coluna Resultados do Pr√©-Tratamento (col3)
from plotly import graph_objs as go
with col3:
    st.header("Resultados do Pr√©-Tratamento")
    st.write(f"Aqui √© poss√≠vel ver os resultados obtidos para a etapa de Pr√©-Tratamento de {biomassa}. Alterne a disposi√ß√£o do gr√°fico para visualizar mais rela√ß√µes entre as vari√°veis.")
    st.button("Calcular Rendimento", key="pretratamento_resultados")
    st.metric(label="üîç **Rendimento Previsto (%)**", value= "86%", delta="+6%", help="Este √© o rendimento previsto para as condi√ß√µes selecionadas.")
    # Criando um gr√°fico de exemplo
    fig = go.Figure(data=[go.Bar(x=['Categoria 1', 'Categoria 2', 'Categoria 3'], y=[10, 20, 30])])
    fig.update_layout(title="Exemplo de Gr√°fico", xaxis_title="Categorias", yaxis_title="Valores")
    
    # Exibindo o gr√°fico
    st.plotly_chart(fig, key = "pretratamento_grafico")

st.markdown("<hr style='border: 1px solid #ccc;' />", unsafe_allow_html=True)

# Pr√≥xima Etapa: Hidr√≥lise

st.markdown(
    "<h1 style='font-size:50px;'>Hidr√≥lise</h1>",
    unsafe_allow_html=True
)
st.write("Nesta se√ß√£o, introduza os dados relevantes ao c√°lculo do redimento da Hidr√≥lise.")
# Criando colunas "Par√¢metros" e "Resultados"
col4, spacer3, col5, spacer4, col6 = st.columns([10, 2, 10, 2, 10])

# Personalizando a coluna Dados do Pr√©-Tratamento (col4)
with col4:
    st.header("Dados do Pr√©-Tratamento")
    st.write("Informe os dados obtidos no pr√©-tratamento.")
    celulose1 = st.number_input("Porcentagem de Celulose Restante", min_value=0.0, max_value=100.0, format="%.2f")
    lignina1 = st.number_input("Porcentagem de Lignina Restante", min_value=0.0, max_value=100.0, format="%.2f")
    hemicelulose1 = st.number_input("Porcentagem de Hemicelulose Restante", min_value=0.0, max_value=100.0, format="%.2f")
    cinzas1 = st.number_input("Porcentagem de cinzas Restante", min_value=0.0, max_value=100.0, format="%.2f")

# Personalizando a coluna Par√¢metros da Hidr√≥lise (col5)
with col5:
    st.header("Par√¢metros da Hidr√≥lise")
    st.write(f"Informe os par√¢metros da hidr√≥lise para definir a sua condi√ß√£o de opera√ß√£o de {biomassa}.")
    catalizador = st.selectbox("Catalizador", ['Tipo 1', 'Tipo 2', 'Tipo 3'])
    # Se o catalizador utilizado foi Tipo 1
    if catalizador == "Tipo 1":
        bagaco11 = st.number_input("Par√¢metro 11 - Baga√ßo")
        bagaco21 = st.number_input("Par√¢metro 21 - Baga√ßo")
        bagaco31 = st.number_input("Par√¢metro 31 - Baga√ßo")
        bagaco41 = st.selectbox("Par√¢metro 41 - Baga√ßo", options=["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"])
        bagaco51 = st.selectbox("Par√¢metro 51- Baga√ßo", options=["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C"])
        bagaco61 = st.selectbox("Par√¢metro 61 - Baga√ßo", options=["Sim", "N√£o"])

    # Se o catalizador utilizado foi Tipo 2
    if catalizador == "Tipo 2":
        palha11 = st.number_input("Par√¢metro 11 - Palha Cana")
        palha21 = st.number_input("Par√¢metro 21 - Palha Cana")
        palha31 = st.number_input("Par√¢metro 31 - Palha Cana")
        palha41= st.selectbox("Par√¢metro 41 - Palha Cana", options=["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"])
        palha51 = st.selectbox("Par√¢metro 51 - Palha Cana", options=["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C"])
        palha61 = st.selectbox("Par√¢metro 61 - Palha Cana", options=["Sim", "N√£o"])
    
    # Se o catalizador utilizado foi Tipo 3
    if catalizador == "Tipo 3":
        milho11 = st.number_input("Par√¢metro 11 - Milho")
        milho21 = st.number_input("Par√¢metro 21 - Milho")
        milho31 = st.number_input("Par√¢metro 31 - Milho")
        milho41 = st.selectbox("Par√¢metro 41 - Milho", options=["Op√ß√£o 1", "Op√ß√£o 2", "Op√ß√£o 3"])
        milho51 = st.selectbox("Par√¢metro 51 - Milho", options=["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C"])
        milho61 = st.selectbox("Par√¢metro 61 - Milho", options=["Sim", "N√£o"])

# Personalizando a coluna Resultados da Hidr√≥lise (col6)
with col6:
    st.header("Resultados da Hidr√≥lise")
    st.write(f"Aqui √© poss√≠vel ver os resultados obtidos para a etapa de Hidr√≥lise de {biomassa}. Alterne a disposi√ß√£o do gr√°fico para visualizar mais rela√ß√µes entre as vari√°veis.")
    st.button("Calcular Rendimento", key="hidrolise_resultados")
    st.metric(label="üîç **Rendimento Previsto (%)**", value= "91%", delta="+5%", help="Este √© o rendimento previsto para as condi√ß√µes selecionadas.")
    # Criando um gr√°fico de exemplo
    fig1 = go.Figure(data=[go.Bar(x=['Categoria 1', 'Categoria 2', 'Categoria 3'], y=[10, 20, 30])])
    fig1.update_layout(title="Exemplo de Gr√°fico", xaxis_title="Categorias", yaxis_title="Valores")
    
    # Exibindo o gr√°fico
    st.plotly_chart(fig1, key = "hidrolise_grafico")